#
# CircleCI 2.0 configuration file.
#
# Understanding CircleCI 'docker' executor.
#
# CircleCI uses "runner" container (created from specified Docker image)
# to checkout source code and run commands defined in this file.
# Application Docker containers (the ones defined in docker-compose.yml)
# run on *remote* docker server, started by CircleCI as a part of their stack.
# The "runner" container uses Docker client to control remote Docker server
# (when used locally, Docker bundles both client and server into a single
# "Docker" application, so you may not even know that these are two different
# services).
#
# Because Docker images use layers, it is possible to cache Docker images
# between builds to significantly speedup application provisioning for each
# job (it requires enabling of Docker Layer Caching feature in CircleCI by
# lodging a support request).
# https://circleci.com/docs/2.0/docker-layer-caching/
version: 2

################################################################################
# VARIABLES
################################################################################
# For YAML support of anchors and references, see http://blog.daemonl.com/2016/02/yaml.html
aliases:
  #-----------------------------------------------------------------------------
  # Per-project variables.
  #-----------------------------------------------------------------------------

  # Timezone of the runner container to ensure that DB cache key uses correct date.
  - &timezone "Australia/Melbourne"

  # SSH key fingerprint to deploy code.
  # Generate a separate SSH key for a user who has push permissions to
  # $DEPLOY_GIT_REMOTE repo with `ssh-keygen -m PEM -t rsa -C "deployer@example.com"
  # command and add private key under "SSH Permissions" in CircleCI UI.
  - &deploy_ssh_fingerprint "4e:82:39:4a:52:0e:ae:a9:ef:c1:19:56:46:21:fd:7f"

  # SSH key fingerprint to deploy code to civic-library.
  - &deploy_ssh_fingerprint2 "aa:01:7b:73:2c:a8:cb:e6:d2:1a:12:c0:e1:53:39:f2"

  # SSH key fingerprint to deploy code to civic_govcms.
  - &deploy_ssh_fingerprint3 "ee:42:65:bf:d7:2d:10:f4:53:17:ab:ed:d7:6a:99:84"

  # SSH key fingerprint to deploy code to civic_default_content.
  - &deploy_ssh_fingerprint4 "ef:1c:ad:2a:dd:ec:0c:cd:1a:63:4c:bb:8a:d7:c1:b7"

  #-----------------------------------------------------------------------------
  # Optional variables.
  #-----------------------------------------------------------------------------

  # How often to refresh the cache of the database. Refer to `date` command.
  - &db_cache_timestamp +%Y_%m_%d

  # Use previous database caches on this branch as a fallback if the above cache
  # does not match (for example, the cache is available only from the previous
  # day). Only allowed "yes" or "no" (include enclosing double quotes).
  - &db_cache_fallback "yes"
  # Which branch to use for a source of the DB caches. Usually, it is the default
  # project branch or *nightly_branch (see below).
  - &db_cache_branch "develop"

  # Database cache directory.
  - &db_cache_dir /root/project/.data

  # CI runner resource class.
  # @see https://circleci.com/docs/2.0/configuration-reference/#resource_class
  # Change to 'large' for faster builds. Requires lodging a support request
  # with CircleCI o enable this feature.
  - &resource_class medium

  # Docker Layer Caching allows to significantly speed up builds by caching
  # images built during previous runs.
  # @see https://circleci.com/docs/2.0/docker-layer-caching/
  # Change to 'true' (without single quotes) to enable. Requires lodging a
  # support request with CircleCI to enable this feature.
  - &docker_layer_caching false

  #-----------------------------------------------------------------------------

  # Shared configuration applied to each job.
  - &container_config
    #
    # Location of checked-out files within "runner" container.
    working_directory: &working_directory /root/project
    environment:
      DEPLOY_SSH_FINGERPRINT: *deploy_ssh_fingerprint
      DEPLOY_SSH_FINGERPRINT2: *deploy_ssh_fingerprint2
      DEPLOY_SSH_FINGERPRINT3: *deploy_ssh_fingerprint3
      DEPLOY_SSH_FINGERPRINT4: *deploy_ssh_fingerprint4
    docker:
      - image: drevops/ci-builder
        auth:
          username: $DOCKER_REGISTRY_USERNAME
          password: $DOCKER_REGISTRY_TOKEN
        environment:
          # Set timezone to ensure that executed operations use correct timestamps.
          TZ: *timezone
          # Volumes mounting to host is not supported in CircleCI.
          VOLUMES_MOUNTED: 0
          # Always answer 'y' to any confirmation questions.
          CONFIRM_RESPONSE: 'y'
          # How often to refresh the cache of the DB dump. Refer to `date` command.
          DB_CACHE_TIMESTAMP: *db_cache_timestamp
          # Use cache fallback if the above timestamp does not match.
          DB_CACHE_FALLBACK: *db_cache_fallback
          # Which branch to use as a source of DB caches.
          DB_CACHE_BRANCH: *db_cache_branch
          # Directory to store code exported between jobs.
          BUILD_EXPORT_DIR: &build_export_dir /workspace/code
          # Do not use symlink when downloading database dump (useful only locally).
          DB_USE_SYMLINK: false
          # Directory to store test results.
          TEST_LOG_DIR: &test_log_dir /tmp/tests
          # Directory to store test artifacts.
          TEST_ARTIFACT_DIR: &test_artifact_dir /tmp/artifacts
          # Use compact error reporting format.
          BEHAT_FORMAT: progress_fail
          # Directory to use for code deployments.
          DEPLOY_CODE_SRC: *build_export_dir
          # Source code location.
          DEPLOY_CODE_ROOT: *working_directory
          # Deployment report file location.
          DEPLOY_REPORT: /tmp/artifacts/deployment_report.txt
          # Check only minimal stack requirements.
          DOCTOR_CHECK_MINIMAL: 1
    resource_class: *resource_class

  # Step to setup remote docker.
  - &step_setup_remote_docker
    setup_remote_docker:
      docker_layer_caching: *docker_layer_caching
      version: 19.03.13
  # Step to process the codebase to be ran in CI environment.
  - &step_process_codebase
    run:
      name: Process codebase to run in CI
      # Remove lines containing '###' and uncomment comments starting with '##'.
      command: sed -i -e "/###/d" docker-compose.yml && sed -i -e "s/##//" docker-compose.yml

################################################################################
# JOBS
################################################################################
jobs:

  build: &job_build
    <<: *container_config
    parallelism: 1
    steps:
      - attach_workspace:
          at: /workspace
      - checkout
      - *step_process_codebase
      - *step_setup_remote_docker
      - run:
          name: Set cache keys for database caching
          command: |
            echo "${DB_CACHE_BRANCH}" > /tmp/DB_CACHE_BRANCH && cat /tmp/DB_CACHE_BRANCH
            echo "yes" > /tmp/DB_CACHE_FALLBACK_YES && cat /tmp/DB_CACHE_FALLBACK_YES
            echo "$(date ${DB_CACHE_TIMESTAMP})" > /tmp/DB_CACHE_TIMESTAMP && cat /tmp/DB_CACHE_TIMESTAMP
      - restore_cache:
          keys:
            #
            # Use cached artifacts from previous builds of this branch ran at
            # any time.
            # https://circleci.com/docs/2.0/caching/#restoring-cache
            - v5-db9-{{ checksum "/tmp/DB_CACHE_BRANCH" }}-{{ checksum "/tmp/DB_CACHE_FALLBACK_YES" }}-{{ checksum "/tmp/DB_CACHE_TIMESTAMP" }}
            - v5-db9-{{ checksum "/tmp/DB_CACHE_BRANCH" }}-{{ checksum "/tmp/DB_CACHE_FALLBACK_YES" }}-
      - run:
          name: Lint docs spelling
          command: ./scripts/lint-spelling.sh
      - run:
          name: Build site
          command: ahoy build
          no_output_timeout: 30m
      - run:
          name: Lint code
          command: ahoy lint
      - run:
          name: Run tests
          command: 'if [ $CIRCLE_NODE_TOTAL -gt 1 ]; then export BEHAT_PARALLEL_INDEX=$CIRCLE_NODE_INDEX; fi && ahoy test'
      - run:
          name: Process test logs and artifacts
          command: |
            [ -n "$(docker-compose ps -q cli)" ] && [ -n "$(docker ps -q --no-trunc | grep "$(docker-compose ps -q cli)")" ] && (
              ahoy cli mkdir -p "${TEST_LOG_DIR}" && docker cp "$(docker-compose ps -q cli)":"${TEST_LOG_DIR}" "${TEST_LOG_DIR}"
              ahoy cli mkdir -p "${TEST_ARTIFACT_DIR}" && docker cp "$(docker-compose ps -q cli)":"${TEST_ARTIFACT_DIR}" "${TEST_ARTIFACT_DIR}"
            ) || true
          when: always
      - store_test_results:
          path: *test_log_dir
          when: always
      - store_artifacts:
          path: *test_artifact_dir
      #
      # Persisting previously built application code artifact (without
      # development dependencies) to use it in deployment job.
      - persist_to_workspace:
          root: /workspace
          paths:
            - code

  # Deploy primary branches.
  deploy: &job_deploy
    <<: *container_config
    steps:
      #
      # Workspace now contains previously built application code artifact.
      - attach_workspace:
          at: /workspace
      #
      # Add SSH key into "runner" container to have "push" access to remote
      # repository.
      - add_ssh_keys:
          fingerprints:
            - *deploy_ssh_fingerprint
      - checkout
      - *step_process_codebase
      - run:
          command: DEPLOY_BRANCH="$CIRCLE_BRANCH" DEPLOY_PR="$(echo $CIRCLE_PULL_REQUEST | cut -d'/' -f 7)" DEPLOY_PR_HEAD=$CIRCLE_SHA1 ahoy deploy
          no_output_timeout: 30m
      - store_artifacts:
          path: *test_artifact_dir

  # Deploy tags.
  deploy_tags: &job_deploy_tags
    <<: *container_config
    steps:
      #
      # Workspace now contains previously built application code artifact.
      - attach_workspace:
          at: /workspace
      #
      # Add SSH key into "runner" container to have "push" access to remote
      # repository.
      - add_ssh_keys:
          fingerprints:
            - *deploy_ssh_fingerprint
            - *deploy_ssh_fingerprint2
            - *deploy_ssh_fingerprint3
            - *deploy_ssh_fingerprint4
      - checkout
      - *step_process_codebase
      - run:
          name: Deploy release to Civic Theme repository.
          command: |
            DEPLOY_CODE_RELEASE_REMOTE_REPO=git@github.com:salsadigitalauorg/civic-theme.git \
            DEPLOY_CODE_RELEASE_REMOTE_BRANCH=master \
            DEPLOY_CODE_RELEASE_SRC_DIR="${BUILD_EXPORT_DIR}/docroot/themes/contrib/civic" \
            ./scripts/deploy-code-release.sh
          no_output_timeout: 30m
      - run:
          name: Deploy release to Civic Library repository.
          command: |
            DEPLOY_SSH_FINGERPRINT=$DEPLOY_SSH_FINGERPRINT2 \
            DEPLOY_CODE_RELEASE_REMOTE_REPO=git@github.com:salsadigitalauorg/civic-library.git \
            DEPLOY_CODE_RELEASE_REMOTE_BRANCH=master \
            DEPLOY_CODE_RELEASE_SRC_DIR="${BUILD_EXPORT_DIR}/docroot/themes/contrib/civic/civic-library" \
            ./scripts/deploy-code-release.sh
          no_output_timeout: 30m
      - run:
          name: Deploy release to Civic GovCMS repository.
          command: |
            DEPLOY_SSH_FINGERPRINT=$DEPLOY_SSH_FINGERPRINT3 \
            DEPLOY_CODE_RELEASE_REMOTE_REPO=git@github.com:salsadigitalauorg/civic_govcms.git \
            DEPLOY_CODE_RELEASE_REMOTE_BRANCH=master \
            DEPLOY_CODE_RELEASE_SRC_DIR="${BUILD_EXPORT_DIR}/docroot/modules/custom/civic_govcms" \
            ./scripts/deploy-code-release.sh
          no_output_timeout: 30m
      - run:
          name: Deploy release to Civic Default Content repository.
          command: |
            DEPLOY_SSH_FINGERPRINT=$DEPLOY_SSH_FINGERPRINT4 \
            DEPLOY_CODE_RELEASE_REMOTE_REPO=git@github.com:salsadigitalauorg/civic_default_content.git \
            DEPLOY_CODE_RELEASE_REMOTE_BRANCH=master \
            DEPLOY_CODE_RELEASE_SRC_DIR="${BUILD_EXPORT_DIR}/docroot/modules/custom/civic_default_content" \
            ./scripts/deploy-code-release.sh
          no_output_timeout: 30m
      - store_artifacts:
          path: *test_artifact_dir


################################################################################
# WORKFLOWS
################################################################################
workflows:
  version: 2
  #
  # Commit workflow. Runs for every commit push to the remote repository.
  commit:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - build
          filters:
            branches:
              # Allowed branches:
              # - master, develop, ci, cisomething
              # - release/123, release/123.456, release/123.456.789, release/123.456.789-rc123
              # - hotfix/123, hotfix/123.456, hotfix/123.456.789
              # - feature/description, feature/123-description, but not feature/9.x-description or feature/7.x-description
              only: /master|develop|ci.*|(release\/)?[0-9]+(\.[0-9]+)+(-rc[0-9]+)?|(hotfix\/)?[0-9]+(\.[0-9]+)+(-rc[0-9]+)?|feature\/(?!7.x-|8.x-|9.x-)[a-zA-z0-9\-\.\,]+/
            tags:
              ignore: /.*/
      - deploy_tags:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              # Allowed tags: 1, 123, 123.456, 123.456.789, 123.456.789-rc123
              only: /^[0-9]+(\.[0-9]+)+(-rc[0-9]+)?$/

