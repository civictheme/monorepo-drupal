<?php

/**
 * @file
 * Install file for civictheme_content.
 *
 * When enabled and CIVICTHEME_CONTENT_PROFILE environment variable is not
 * available, civictheme_content_default module will be installed and content
 * provided with the module will be provisioned.
 *
 * When enabled and CIVICTHEME_CONTENT_PROFILE environment variable is
 * available as a comma-separated list of types, then a corresponding
 * civictheme_content_<type> module will be installed and content provided
 * with each of the modules will be provisioned.
 *
 * To enable this module without provisioning any content, set the value
 * of CIVICTHEME_CONTENT_PROFILE to 'none'.
 */

use Drupal\civictheme\CivicthemeConfigImporter;
use Drupal\civictheme_content\Helper;
use Drupal\Core\Installer\Exception\InstallerException;

/**
 * Implements hook_install().
 *
 * Enable sub-modules based on the value of CIVICTHEME_CONTENT_PROFILE
 * environment variable.
 *
 * If 'none' is specified - none of the sub-modules will be enabled.
 */
function civictheme_content_install() {
  $content_profile = 'default';
  if (!empty(trim(getenv('CIVICTHEME_CONTENT_PROFILE')))) {
    $content_profile = strtolower(trim(getenv('CIVICTHEME_CONTENT_PROFILE')));
    $content_profile = preg_replace('/[^a-z0-9_]/', '', $content_profile);
  }

  if ($content_profile == 'none') {
    Helper::log(t('Skipping enabling of content modules.'));

    return;
  }

  $existing_content_profiles = array_map(function ($value) {
    return substr($value, strlen('civictheme_content_'));
  }, array_diff(scandir(__DIR__ . DIRECTORY_SEPARATOR . 'modules'), ['..', '.']));

  if (!in_array($content_profile, $existing_content_profiles)) {
    // Show as a warning message, but do not fail the installation.
    Helper::log(t('Unsupported content profile provided: %name.', [
      '%name' => $content_profile,
    ]));
  }

  $module = 'civictheme_content_' . $content_profile;

  if (\Drupal::service('module_installer')->install([$module])) {
    Helper::log(t('Successfully enabled: %name.', [
      '%name' => $module,
    ]));
    _civictheme_content_install_submodule($module);
  }
  else {
    // Fail installation as a module with a correct name should have been
    // enabled.
    throw new InstallerException('Unable to enable: ' . $module);
  }
}

/**
 * Install submodule of this module.
 */
function _civictheme_content_install_submodule($module) {
  $active_theme = \Drupal::theme()->getActiveTheme();
  // Only proceed if current theme is CivicTheme, or it's sub-theme so that
  // content could be applied only to expected configurations.
  if (!array_key_exists('civictheme', $active_theme->getBaseThemeExtensions())) {
    return;
  }

  $config_importer = \Drupal::service('class_resolver')->getInstanceFromDefinition(CivicthemeConfigImporter::class);
  // Import config from the 'config/optional' directory of the submodule being
  // installed.
  $config_importer->importConfigs(
    \Drupal::moduleHandler()->getModule($module)->getPath() . DIRECTORY_SEPARATOR . 'config' . DIRECTORY_SEPARATOR . 'optional',
    [
      'civictheme-' => FALSE,
      'civictheme_content' => FALSE,
      'themes/contrib/civictheme' => $active_theme->getPath(),
      'civictheme' => $active_theme->getName(),
    ]
  );
}

/**
 * Common updates to be run by all content modules.
 */
function civictheme_content_post_update_common() {
  // Site site slogan.
  \Drupal::service('config.factory')->getEditable('system.site')
    ->set('slogan', 'A design system by Salsa Digital')
    ->save();

  // Provision content using provision file, if it exists.
  $provision_file = \Drupal::service('extension.list.theme')->getPath('civictheme') . DIRECTORY_SEPARATOR . 'theme-settings.provision.inc';
  if (is_file($provision_file)) {
    require_once $provision_file;
    // Provision user permissions.
    civictheme_provision__permissions();
  }
}
