<?php

/**
 * @file
 * Install file for civictheme_content.
 *
 * When enabled and CIVICTHEME_CONTENT_TYPES environment variable is not
 * available, civictheme_content_default module will be installed and content
 * provided with the module will be provisioned.
 *
 * When enabled and CIVICTHEME_CONTENT_TYPES environment variable is
 * available as a comma-separated list of types, then a corresponding
 * civictheme_content_<type> module will be installed and content provided
 * with each of the modules will be provisioned.
 *
 * To enable this module without provisioning any content, set the value
 * of CIVICTHEME_CONTENT_TYPES to 'none'.
 */

use Drupal\block\Entity\Block;
use Drupal\civictheme_content\Helper;
use Drupal\Core\Installer\Exception\InstallerException;

/**
 * Implements hook_install().
 */
function civictheme_content_install() {
  if (!empty(trim(getenv('CIVICTHEME_CONTENT_TYPES')))) {
    $types = array_map('strtolower', array_map('trim', explode(',', trim(getenv('CIVICTHEME_CONTENT_TYPES')))));
  }
  else {
    $types = ['default'];
  }

  if (in_array('none', $types)) {
    Helper::log(t('Skipping enabling of content modules.'));
    return;
  }

  $existing = array_map(function ($value) {
    return substr($value, strlen('civictheme_content_'));
  }, array_diff(scandir(__DIR__ . DIRECTORY_SEPARATOR . 'modules'), ['..', '.']));

  $unsupported = array_diff($types, $existing);
  if (!empty($unsupported)) {
    // Show as a warning message, but do not fail the installation.
    Helper::log(t('Unsupported type(s) provided: %list.', [
      '%list' => implode(', ', $unsupported),
    ]));
  }

  $supported = array_intersect($types, $existing);

  if (empty($supported)) {
    // Show as a warning message, but do not fail the installation.
    Helper::log(t('No supported types were provided. Supported types: %list.', [
      '%list' => implode(', ', $supported),
    ]));
    return;
  }

  $modules = array_map(function ($value) {
    return 'civictheme_content_' . $value;
  }, $supported);

  $theme_block_list = [
    'Banner' => ['banner', '50c52459-c100-4e4d-92a4-9c4c77d8f8d0'],
    'Search' => ['header_middle_3', '286ff750-a9a9-423a-8a4e-515f79fc0a8f'],
    'Mobile Navigation' => [
      'header_middle_3',
      'b7f36176-620f-4178-aadd-9b448c610986',
    ],
    'Signup' => ['content_bottom', '5508dc51-1cf8-4577-9038-b572fbd698ae'],
    'Social links' => ['footer_top_2', '5c0ad15f-3e9c-4eeb-8525-7a064b06fc58'],
    'Footer - Acknowledgment of country' => [
      'footer_bottom_1',
      '7cf65f98-cbae-4e9d-b6ea-7d6d1c437c1c',
    ],
    'Footer - Copyright' => [
      'footer_bottom_2',
      'd7098a8c-3ba3-48f7-bc0c-5787ebaa0427',
    ],

  ];
  // Blocks with existing name will be removed and re-created.
  foreach ($theme_block_list as $key => $info) {
    /** @var \Drupal\block_content\Entity\BlockContent $block */
    $blocks = \Drupal::entityTypeManager()->getStorage('block_content')->loadByProperties([
      'info' => $key,
    ]);

    if (!empty($blocks)) {
      foreach ($blocks as $block) {
        $block->delete();
      }
    }
  }
  $assign_region = FALSE;
  foreach ($modules as $module) {
    if (\Drupal::service('module_installer')->install([$module])) {
      Helper::log(t('Successfully enabled: %name.', [
        '%name' => $module,
      ]));
      $assign_region = TRUE;
    }
    else {
      // Fail installation as a module with a correct name should have been
      // enabled.
      throw new InstallerException('Unable to enable: ' . $module);
    }
  }
  if ($assign_region) {
    // Assign blocks to region.
    foreach ($theme_block_list as $key => $info) {
      _civictheme_content_place_block($key, $info[0], $info[1]);
    }
  }
}

/**
 * Place block.
 *
 * @param string $label
 *   Admin label for the block.
 * @param string $region
 *   Region to place the block into.
 * @param string $uuid
 *   Optional UUID to use for plugin_id. Defaults to NULL. If not provided - a
 *   random UUID will be generated.
 * @param array $settings
 *   Optional array of settings to pass to the block. Default to empty array.
 *   If not provided - sensible defaults will be used.
 * @param string $block_type
 *   Optional block type. Defaults to 'block_content'.
 */
function _civictheme_content_place_block($label, $region, $uuid = NULL, array $settings = [], $block_type = 'block_content') {
  $theme_name = \Drupal::configFactory()->get('system.theme')->get('default');

  $label_machine_name = preg_replace('@[^a-zA-Z0-9_]+@', '_', strtolower(str_replace(' ', '_', $label)));
  $id = $theme_name . '_' . $label_machine_name;
  $base_theme_id = 'civictheme_' . $label_machine_name;
  $settings += [
    'plugin' => $block_type . ':' . ($uuid ?? \Drupal::service('uuid')->generate()),
    'region' => $region,
    'id' => $id,
    'theme' => $theme_name,
    'label' => $label,
    'label_display' => FALSE,
    'visibility' => [],
    'weight' => 0,
  ];

  $values = [];
  // Remove extra values that do not belong in the settings array.
  foreach (['region', 'id', 'theme', 'plugin', 'weight', 'visibility'] as $key) {
    $values[$key] = $settings[$key];
    unset($settings[$key]);
  }

  foreach ($values['visibility'] as $id => $visibility) {
    $values['visibility'][$id]['id'] = $id;
  }
  $values['settings'] = $settings;

  // Remove block if it already exists.
  $block = Block::load($values['id']);
  if ($block) {
    $block->delete();
  }

  // Special case: remove existing blocks created by the base theme to avoid
  // duplicated blocks.
  $block = Block::load($base_theme_id);
  if ($block) {
    $block->delete();
  }

  $block = Block::create($values);

  $block->save();
}
