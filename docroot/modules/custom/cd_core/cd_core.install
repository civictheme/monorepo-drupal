<?php

/**
 * @file
 * Install file for core.
 */

use Drupal\cd_core\Helper;
use Drupal\user\Entity\Role;
use Drupal\user\Entity\User;

/**
 * Implements hook_install().
 */
function cd_core_install() {
  module_load_include('php', 'cd_core', 'cd_core.post_update');
  $functions = get_defined_functions();
  // Run all update functions when installing this module.
  foreach ($functions['user'] as $function) {
    if (strpos($function, 'cd_core_update_') === 0) {
      call_user_func($function);
    }
  }

  // Reset all post_update updates for this module.
  $key_value = \Drupal::keyValue('post_update');
  $executed_updates = $key_value->get('existing_updates', []);
  // Run all post-update functions when installing this module.
  foreach ($executed_updates as $k => $function) {
    if (strpos($function, 'cd_core_post_update_') === 0) {
      unset($executed_updates[$k]);
    }
  }
  $executed_updates = array_values($executed_updates);
  $key_value->set('existing_updates', $executed_updates);
}

/**
 * Enables 'civic_demo' theme.
 */
function cd_core_update_9000() {
  \Drupal::service('theme_installer')->install(['adminimal_theme']);
  \Drupal::service('config.factory')->getEditable('system.theme')->set('admin', 'adminimal_theme')->save();

  \Drupal::service('theme_installer')->install(['civic']);
  \Drupal::service('config.factory')->getEditable('system.theme')->set('default', 'civic')->save();
  \Drupal::service('theme_installer')->install(['civic_demo']);
  \Drupal::service('config.factory')->getEditable('system.theme')->set('default', 'civic_demo')->save();

  \Drupal::service('theme_installer')->uninstall(['claro']);
  \Drupal::service('theme_installer')->uninstall(['govcms_bartik']);
  \Drupal::service('theme_installer')->uninstall(['bartik']);
}

/**
 * Grants all permissions to govcms_site_administrator roles.
 */
function cd_core_update_9001() {
  /** @var \Drupal\user\Entity\Role $admin_role */
  $admin_role = Role::load('govcms_site_administrator');

  $permissions = \Drupal::service('user.permissions')->getPermissions();
  user_role_grant_permissions($admin_role->id(), array_keys($permissions));
}

/**
 * Creates administrator users.
 */
function cd_core_update_9002() {
  $emails = [
    'alan@salsadigital.com.au',
    'akhil.bhandari@salsadigital.com.au',
    'alex.skrypnyk@salsadigital.com.au',
    'chris.darke@salsadigital.com.au',
    'danielle.sheffler@salsadigital.com.au',
    'govind@salsadigital.com.au',
    'kate.swayne@salsadigital.com.au',
    'lokender.singh@salsadigital.com.au',
    'richard.gaunt@salsadigital.com.au',
    'satyajit.das@salsadigital.com.au',
    'john.cloys@salsadigital.com.au',
  ];

  foreach ($emails as $email) {
    $user = User::create();
    $user->setUsername($email);
    $user->setEmail($email);
    $user->addRole('govcms_site_administrator');
    $user->activate();
    $user->enforceIsNew();
    $user->save();
  }
}

/**
 * Set civic_demo theme settings.
 */
function cd_core_update_9003() {
  // Set logo in theme settings.
  $logo_path = '/themes/custom/civic_demo/assets/logo.png';
  $config = \Drupal::service('config.factory')->getEditable('civic_demo.settings');
  $logo_settings = [
    'civic_header_logo_mobile',
    'civic_footer_logo_mobile',
    'civic_footer_logo_desktop',
  ];
  $config->set('logo', [
    'use_default' => FALSE,
    'path' => $logo_path,
    'url' => $logo_path,
  ]);
  foreach ($logo_settings as $logo_setting) {
    $config->set($logo_setting, $logo_path);
  }
  $config->set('logo_path', substr($logo_path, 1));
  $config->set('civic_site_logo_alt', 'Civic demo logo');
  $config->set('civic_header_theme', 'light');
  $config->set('civic_footer_theme', 'light');
  $config->save();
}

/**
 * Add links for footer.
 */
function cd_core_update_9007() {
  $footer_menus = [
    'civic_footer_menu_1',
    'civic_footer_menu_2',
    'civic_footer_menu_3',
    'civic_footer_menu_4',
  ];

  $top_level_links = [
    'For individuals' => '/node/29',
    'About us' => '/node/20',
    'Help' => '/node/1',
    'Services' => '/node/14',
  ];
  $top_level_link_titles = array_keys($top_level_links);

  $child_links = [
    'For individuals' => '/node/36',
    'For businesses' => '/civic/pages',
    'For government' => '/node/31',
    'Services' => '/node/40',
    'News & events' => '/node/9',
  ];

  foreach ($footer_menus as $footer_menu) {
    $top_level_link__title = array_pop($top_level_link_titles);
    $top_level_link__link = array_pop($top_level_links);

    $child_link__keys = array_keys($child_links);
    $child_links__links = array_values($child_links);
    shuffle($child_link__keys);
    shuffle($child_links__links);
    $shuffled_child_links = array_combine($child_link__keys, $child_links__links);
    Helper::saveMenuTree($footer_menu, [
      $top_level_link__title => [
        'link' => $top_level_link__link,
        'children' => $shuffled_child_links,
      ],
    ]);
  }
}
