<?php

/**
 * @file
 * Functions to support theming in the Civic theme.
 */

require_once 'includes/civic_banner.inc';
require_once 'includes/civic_cards.inc';
require_once 'includes/civic_pages.inc';
require_once 'includes/civic_paragraphs.inc';
require_once 'includes/civic_utilities.inc';
require_once 'includes/civic_views.inc';
require_once 'includes/civic_nodes.inc';

// @todo Remove before release 1.
if (file_exists('includes/styleguide.inc')) {
  include 'includes/styleguide.inc';
}

/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 */
function civic_preprocess_page(&$variables) {
  // Adding all the regions from page.
  $regions = array_filter($variables['page'], function ($key) {
    return strpos($key, '#') !== 0;
  }, ARRAY_FILTER_USE_KEY);
  $variables += $regions;
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function civic_preprocess_node(&$variables) {
  $view_mode = $variables['elements']['#view_mode'];
  $preprocessor_function = '_civic_preprocess_node__' . $view_mode;
  if (function_exists($preprocessor_function)) {
    $preprocessor_function($variables);
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function civic_preprocess_paragraph(&$variables) {
  _civic_preprocess_paragraph($variables);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function civic_preprocess_block(&$variables) {
  // @todo Build theme suggestion system.
  $variables['component'] = '@civic/block/block.twig';
  _civic_preprocess_civic_banner($variables);
}

/**
 * Implements hook_library_info_build().
 */
function civic_theme_library_info_build() {
  $component_directory = drupal_get_path('library', 'civic') . '/assets';
  $extensions = ['css', 'js'];
  $extensions = array_map('preg_quote', $extensions);
  $extensions = implode('|', $extensions);
  /** @var \Drupal\Core\File\FileSystem $file_system */
  $file_system = \Drupal::service('file_system');
  $file_scan = $file_system->scanDirectory($component_directory, "/{$extensions}$/");
  $libraries = [];
  foreach ($file_scan as $file) {
    $parts = explode('.', $file->filename);
    $extension = end($parts);
    switch ($extension) {
      case 'css':
        $libraries[$file->name][$extension] = [
          'component' => [
            '/' . $file->uri => [],
          ],
        ];
        break;

      case 'js':
        $libraries[$file->name][$extension] = [
          '/' . $file->uri => [],
        ];
        break;
    }
  }

  return $libraries;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function civic_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  _civic_theme_suggestions_civic_banner($suggestions, $variables);
}

/**
 * Implements template_preprocess_pager().
 */
function civic_theme_preprocess_pager(&$variables) {
  if (isset($variables['items']['first']['text'])) {
    $variables['items']['first']['text'] = t('First');
  }
  if (isset($variables['items']['last']['text'])) {
    $variables['items']['last']['text'] = t('Last');
  }
  if (isset($variables['items']['previous']['text'])) {
    $variables['items']['previous']['text'] = t('Previous');
  }
  if (isset($variables['items']['next']['text'])) {
    $variables['items']['next']['text'] = t('Next');
  }
}
