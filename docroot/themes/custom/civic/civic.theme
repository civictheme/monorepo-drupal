<?php

/**
 * @file
 * Functions to support theming in the Civic theme.
 */

use Drupal\Core\Url;

require_once 'includes/block--system_branding.inc';
require_once 'includes/civic_banner.inc';
require_once 'includes/civic_cards.inc';
require_once 'includes/civic_pages.inc';
require_once 'includes/civic_paragraphs.inc';
require_once 'includes/civic_utilities.inc';
require_once 'includes/civic_views.inc';
require_once 'includes/civic_media.inc';
require_once 'includes/civic_nodes.inc';

// @todo Remove before release 1.
if (file_exists('includes/styleguide.inc')) {
  include 'includes/styleguide.inc';
}

/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 */
function civic_preprocess_page(&$variables) {
  // Adding header and footer theme to page variables.
  $variables['page']['header_theme'] = theme_get_setting('civic_header_theme') ?? 'light';
  $variables['page']['footer_theme'] = theme_get_setting('civic_footer_theme') ?? 'dark';
  // Adding all the regions from page.
  $regions = array_filter($variables['page'], function ($key) {
    return strpos($key, '#') !== 0;
  }, ARRAY_FILTER_USE_KEY);
  $variables += $regions;
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function civic_preprocess_node(&$variables) {
  $view_mode = $variables['elements']['#view_mode'];
  $preprocessor_function = '_civic_preprocess_node__' . $view_mode;
  if (function_exists($preprocessor_function)) {
    $preprocessor_function($variables);
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function civic_preprocess_paragraph(&$variables) {
  _civic_preprocess_paragraph($variables);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function civic_preprocess_block(&$variables) {
  _civic_preprocess_civic_banner($variables);
  _civic_preprocess_menu_block_civic_footer_menu($variables);
  _civic_preprocess_block_content($variables);
}

/**
 * Implements hook_library_info_build().
 */
function civic_theme_library_info_build() {
  $component_directory = drupal_get_path('library', 'civic') . '/assets';
  $extensions = ['css', 'js'];
  $extensions = array_map('preg_quote', $extensions);
  $extensions = implode('|', $extensions);
  /** @var \Drupal\Core\File\FileSystem $file_system */
  $file_system = \Drupal::service('file_system');
  $file_scan = $file_system->scanDirectory($component_directory, '/{$extensions}$/');
  $libraries = [];
  foreach ($file_scan as $file) {
    $parts = explode('.', $file->filename);
    $extension = end($parts);
    switch ($extension) {
      case 'css':
        $libraries[$file->name][$extension] = [
          'component' => [
            '/' . $file->uri => [],
          ],
        ];
        break;

      case 'js':
        $libraries[$file->name][$extension] = [
          '/' . $file->uri => [],
        ];
        break;
    }
  }

  return $libraries;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function civic_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  _civic_theme_suggestions_civic_banner($suggestions, $variables);
}

/**
 * Implements template_preprocess_pager().
 */
function civic_theme_preprocess_pager(&$variables) {
  if (isset($variables['items']['first']['text'])) {
    $variables['items']['first']['text'] = t('First');
  }
  if (isset($variables['items']['last']['text'])) {
    $variables['items']['last']['text'] = t('Last');
  }
  if (isset($variables['items']['previous']['text'])) {
    $variables['items']['previous']['text'] = t('Previous');
  }
  if (isset($variables['items']['next']['text'])) {
    $variables['items']['next']['text'] = t('Next');
  }
}

/**
 * Implements hook_theme().
 */
function civic_theme() {
  return [
    'civic_breadcrumb' => [
      'base hook' => 'breadcrumb',
      'variables' => [
        'display_theme' => NULL,
        'active_is_link' => NULL,
        'links' => [],
      ],
      'template' => 'navigation/breadcrumb',
    ],
    'civic_basic_content' => [
      'variables' => [
        'content' => NULL,
        'display_theme' => NULL,
      ],
      'template' => 'content/civic-basic-content',
    ],
    'civic_icon_link' => [
      'variables' => [
        'symbol' => '',
        'text' => '',
        'size' => 'small',
        'modifier_class' => '',
        'new_window' => FALSE,
        'url' => NULL,
      ],
      'template' => 'misc/icon-link',
    ],
    'civic_description_list' => [
      'variables' => [
        'items' => [],
        'is_inline' => '',
        'modifier_class' => '',
      ],
      'template' => 'misc/description-list',
    ],
  ];
}

/**
 * Implements template_preprocess_civic_breadcrumb().
 */
function civic_preprocess_civic_breadcrumb(&$variables) {
  if (!empty($variables['display_theme'])) {
    $variables['theme'] = $variables['display_theme'];
  }
}

/**
 * Implements template_preprocess_HOOK().
 */
function civic_preprocess_civic_icon_link(&$variables) {
  if ($variables['url'] instanceof Url) {
    $variables['url'] = $variables['url']->toString();
  }
  $variables['#theme_wrappers'] = [];
}

/**
 * Preprocess for footer menu block.
 */
function _civic_preprocess_menu_block_civic_footer_menu(&$variables) {
  if (isset($variables['elements']['#base_plugin_id']) && $variables['base_plugin_id'] != 'menu_block') {
    return;
  }

  $menu_name = strtr($variables['elements']['#derivative_plugin_id'], '-', '_');
  if ($menu_name == 'civic_footer') {
    // Set menu theme as per footer theme.
    $variables['theme'] = theme_get_setting('civic_footer_theme') ?? 'dark';

    // Make all items collapsible.
    $variables['attributes']['data-collapsible'] = '';
    $variables['attributes']['data-collapsible-collapsed'] = '';
    $variables['attributes']['data-responsive'] = '<m';
  }
}

/**
 * Preprocess for block_content block.
 */
function _civic_preprocess_block_content(&$variables) {
  if (isset($variables['elements']['#base_plugin_id']) && $variables['base_plugin_id'] != 'block_content') {
    return;
  }

  switch ($variables['elements']['#configuration']['label']) {
    case 'Copyright':
      $variables['attributes']['class'][] = 'copyright';
      $variables['attributes']['class'][] = 'civic-text-regular';
      break;
  }
}

/**
 * Implements template_preprocess_image().
 */
function civic_preprocess_image(&$variables) {
  if (isset($variables['attributes']['src'])) {
    $variables['src'] = $variables['attributes']['src'];
  }
  elseif (!empty($variables['uri'])) {
    $variables['attributes']['src'] = file_url_transform_relative(file_create_url($variables['uri']));
  }
}
