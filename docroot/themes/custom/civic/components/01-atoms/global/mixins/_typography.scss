//
// Typography mixins.
//

//
// Include font size, height, weight and family for one-to-many breakpoints.
//
// @include typography('heading-l');
// or
// @include typography((24px, 1.2em, 400));
// or
// @include typography((
//   'xs': (16px, 1.5em, 400),
//   'l': (24px, 1.2em, 600)
// ));
//
@mixin civic-typography($ruleset) {

  // Print preset
  @if type-of($ruleset)==string {
    @if map-get($civic-typography, $ruleset)==null {
      @error '"#{$ruleset}" is not an available typeset';
    }

    $ruleset: map-get($civic-typography, $ruleset);
  }

  // Print rules
  @if type-of($ruleset)==list {
    @include _typography_print_rules($ruleset);
  }

  // Print breakpoints
  @if type-of($ruleset)==map {
    $breakpoints: map-keys($ruleset);

    @each $breakpoint in $breakpoints {
      $breakpoint-rules: map-get($ruleset, $breakpoint);

      @include breakpoint($breakpoint) {
        @include _typography_print_rules($breakpoint-rules);
      }
    }
  }
}

//
// Do not use directly.
// Use @include typography() mixin instead.
//
@mixin _typography_print_rules($rules) {
  $font-size: nth($rules, 1);
  $line-height: nth($rules, 2);
  $font-weight: 'default';
  $font-family: 'none';

  @if length($rules)>=3 {
    $font-weight: nth($rules, 3);
  }

  @if length($rules)>=4 {
    $font-family: nth($rules, 4);
  }

  @include _typography_font($font-size, $line-height, $font-weight, $font-family);
}

//
// Do not use directly.
// Use @include typography() mixin instead.
//
@mixin _typography_font($font-size: 's', $line-height: 1.2em, $font-weight: 'default', $font-family: 'none') {
  font-size: rem($font-size);
  line-height: $line-height;

  @if $font-family !='none' {
    font-family: map-get($civic-font, $font-family);
  }

  @if $font-weight !='default' {
    font-weight: $font-weight;
  }
}
