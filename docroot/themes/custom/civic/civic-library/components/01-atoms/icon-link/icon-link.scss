@use 'sass:math';
@import '../../00-base/base';

//
// Sets required border radius for a circular border for a given icon size.
//
@mixin civic-icon-border-radius-size($size) {
  @if type-of($size)==string {
    @if map-get($civic-icon-sizes, $size)==null {
      @error '"#{$size}" is not an available icon size.';
    }

    $size: map-get($civic-icon-sizes, $size);
  }

  @if type-of($size)==map {
    $breakpoints: map-keys($size);

    @each $breakpoint in $breakpoints {
      $breakpoint-rules: map-get($size, $breakpoint);

      @include civic-breakpoint($breakpoint) {
        border-radius: math.div(rem(nth($breakpoint-rules, 1)), 2);
      }
    }
  }
}

.civic-icon-link {
  $root: &;
  display: block;
  background: none;
  border-bottom: none;
  border-radius: $civic-border-radius;
  text-decoration: none;

  &#{$root}--with-border {
    @each $size, $values in $civic-icon-sizes {
      &#{$root}--size-#{$size} {
        .civic-icon {
          border: 1px solid currentColor;
          @include civic-icon-border-radius-size($size);
        }
      }
    }
  }

  &,
  &.civic-theme-light {
    color: $civic-icon-link-light-color;

    &:hover {
      color: $civic-icon-link-light-color-hover;
    }

    &:focus {
      @include civic-outline(false);
      color: $civic-icon-link-light-color-focus;
    }

    &:active {
      color: $civic-icon-link-light-color-active;
    }

    &:visited {
      color: $civic-icon-link-light-color-visited;
    }
  }

  &.civic-theme-dark {
    color: $civic-icon-link-dark-color;

    &:hover {
      color: $civic-icon-link-dark-color-hover;
    }

    &:focus {
      @include civic-outline(false);
      color: $civic-icon-link-dark-color-focus;
    }

    &:active {
      color: $civic-icon-link-dark-color-active;
    }

    &:visited {
      color: $civic-icon-link-dark-color-visited;
    }
  }

}
