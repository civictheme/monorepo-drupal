// Creds to https://github.com/kristoferjoseph/flexboxgrid
// No gutters
// No text alignment with justified container classes (center-xs, for example)
.row {
  @include row($grid-gutters);
}

.row.reverse {
  @include row-reverse();
}

.row.natural-height {
  @include row-natural-height();
}

.row.flex-column {
  @include row-flex-column();
}

.col {
  // Make columns at the lowest breakpoint to act as a single column per row.
  @include col($grid-lowest-breakpoint, $grid-columns);

  $next-bp: map-get-next($civic-breakpoints, $grid-lowest-breakpoint, map-get($civic-breakpoints, 'xs'), key);

  // Spawn columns to fit into as single row for larger breakpoints.
  @include civic-breakpoint($next-bp) {
    @include col();
  }
}

.col.reverse {
  @include col-reverse();
}

.first {
  order: -1;
}

.last {
  order: 1;
}

.align-start {
  align-self: flex-start;
}

.align-end {
  align-self: flex-end;
}

.align-center {
  align-self: center;
}

.align-baseline {
  align-self: baseline;
}

.align-stretch {
  align-self: stretch;
}

//------------------------------------------------------------------------------

// Mixin to run inside of for loop - creates col/breakpoint classes
@each $breakpoint,
$value in $civic-breakpoints {
  @if $breakpoint==$grid-lowest-breakpoint {
    @include col-factory($breakpoint);
  }

  @else {
    @include civic-breakpoint($breakpoint) {
      @include col-factory($breakpoint);
    }
  }
}

//
// Visibility mixins.
//
@each $breakpoint,
$value in $civic-breakpoints {
  @if $breakpoint==$visible-lowest-breakpoint {
    .show-#{$breakpoint} {
      display: block;
    }

    .show-#{$breakpoint}-table {
      display: table;
    }

    .hide-#{$breakpoint} {
      display: none;
    }
  }

  @else {
    @include civic-breakpoint($breakpoint) {
      .show-#{$breakpoint} {
        display: block;
      }

      .show-#{$breakpoint}-table {
        display: block;
      }

      .hide-#{$breakpoint} {
        display: none;
      }
    }
  }
}

//------------------------------------------------------------------------------
// Output grid debug overlay.
//------------------------------------------------------------------------------

//
// Class added to the <body>.
// If additional logic was implemented in theme, this is added to the page by
// appending URL query string ?debug-css-grid=1.
//
.debug-css-grid {
  .layout-container {
    position: relative;
    @include block-debug(blue);

    @each $bp,
    $value in $civic-breakpoints {
      &::after {

        // Support fo super-narrow screens.
        @include civic-breakpoint-upto(xs) {
          $width: map-get($civic-grid-offsets, xs) * 2;
          @include _grid-debug-overlay(calc(100% - #{$width}), 1, 0, 18px, false);
        }

        @include civic-breakpoint($bp) {

          // Use single column on xs and s.
          @if $bp==xs or $bp==s {
            @include _grid-debug-overlay($value - (map-get($civic-grid-offsets, $bp) * 2), 1, 0, 18px, false);
          }

          @else {
            @include _grid-debug-overlay($value - (map-get($civic-grid-offsets, $bp) * 2), $grid-columns, 24px, 18px, false);
          }
        }
      }
    }
  }

  @each $bp,
  $value in $civic-breakpoints {
    &::before {
      @include civic-breakpoint($bp) {
        content: '#{$bp}: #{$value}';
        position: fixed;
        bottom: 0;
        right: 0;
        background: rgba(purple, .75);
        display: block;
        padding: .25em .5em;
        z-index: 1000;
      }
    }
  }

  .region {
    @include block-debug(green);
  }
}

//
// Grid debug test page styles.
// If additional logic was implemented in theme, this is added to the page by
// appending URL query string ?debug-grid-page=1.
// @see templates/layout/page-test-grid.html.twig
//
.page-test-grid {
  .test-header {
    @include block-debug(blue);
    margin-bottom: 1em;
    background: rgba(blue, .25);

    .test-header-inner {
      @include block-debug(red);
    }
  }

  .test-content {
    @include block-debug(blue);
    margin-bottom: 1em;


    .test-content-inner {
      @include block-debug(red);
    }
  }

  .test-footer {
    @include block-debug(blue);
    background: rgba(blue, .25);

    .test-footer-inner {
      @include block-debug(red);
    }
  }

  // Visually outline rows and columns.
  .row {
    &.example {
      @include block-debug(green);
      // @include vertical-spacing($space);

      [class^="col"] {
        @include block-debug;

        .example {
          background: rgba(purple, 0.25);
          font-size: 8px;
        }

        .example2 {
          background: rgba(green, 0.25);
        }
      }
    }
  }

  .example-full-width {
    background: rgba(orange, 0.25);

    .example-full-width-inner {
      background: rgba(green, 0.25);
    }
  }
}

//------------------------------------------------------------------------------
// Container class should wrap every row.
//------------------------------------------------------------------------------

.container {
  @include container;
}

//
// Max width container class to limit the width of the fluid containers at max width.
//
.container-max-width {
  @include civic-breakpoint(xxl) {
    width: map-get($civic-breakpoints, xxl);
    margin: 0 auto;
  }
}

//
// Offset container class to add offset on small screens.
//
.container-offset-xs {
  @include civic-breakpoint-upto(m) {
    padding-left: $grid-offset-xs;
    padding-right: $grid-offset-xs;
    width: auto;
  }
}

//------------------------------------------------------------------------------
// Breakout from the container.
//------------------------------------------------------------------------------

.container-breakout {
  @include container-breakout;
}

.row-no-gutter {
  margin-left: 0;
  margin-right: 0;
}

.col-no-gutter {
  padding: 0;
}
