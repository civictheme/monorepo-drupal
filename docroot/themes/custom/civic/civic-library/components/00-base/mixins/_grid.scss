//
// Grid mixins.
//
// Grid system taken from: http://sassflexboxgrid.com/
// Modified for use with Civic.
// - added gutters support
// - added offset (outside gutters) support
// - added grid overlay support
// - added utility grid classes
//
// stylelint-disable scss/dollar-variable-pattern

@use 'sass:math';
@use 'sass:map';

@mixin civic-row($gutters: $civic-grid-gutters) {
  box-sizing: border-box;
  margin: 0 auto;
  display: flex;
  flex: 0 1 auto;
  flex-direction: row;
  flex-wrap: wrap;

  @include _civic-print-all-gutters($gutters, margin, -1);
}

@mixin civic-row-reverse() {
  flex-direction: row-reverse;
}

@mixin civic-row-natural-height() {
  align-items: flex-start;
}

@mixin civic-row-flex-column() {
  flex-direction: column;
}

@mixin civic-col-reverse() {
  flex-direction: column-reverse;
}

//
// Print all gutters at their breakpoints.
//
// Do not use directly.
//
@mixin _civic-print-all-gutters($gutters: $civic-grid-gutters, $rulePrefix: padding, $scale: 1) {
  @if $gutters {
    @each $bp, $gutter in $gutters {
      @if $bp == $civic-grid-lowest-breakpoint {
        #{$rulePrefix}-left: math.div($gutter, 2) * $scale;
        #{$rulePrefix}-right: math.div($gutter, 2) * $scale;
      }
      @else {
        @include civic-breakpoint($bp) {
          #{$rulePrefix}-left: math.div($gutter, 2) * $scale;
          #{$rulePrefix}-right: math.div($gutter, 2) * $scale;
        }
      }
    }
  }
}

//
// Condition to run inside of the col mixin.
//
// Do not use directly.
//
@mixin _civic-col-condition($col-number) {
  @if type-of($col-number) == number {
    @if $col-number > $civic-grid-columns or $col-number == 0 {
      @warn 'Column number must be greater than 0 and less than or equal to total number of columns in the grid (#{$civic-grid-columns})';
    }
    @else {
      box-sizing: border-box;
      flex-basis: math.div(100%, $civic-grid-columns) * $col-number;
      max-width: math.div(100%, $civic-grid-columns) * $col-number;

      @include _civic-print-all-gutters();
    }
  }

  // If no col number is passed then arg is set to "auto" by default
  // "auto" mode fills the horizontal space with evenly sized containers
  @else if $col-number == 'auto' {
    box-sizing: border-box;
    flex-grow: 1;
    flex-basis: 0;
    max-width: 100%;

    @include _civic-print-all-gutters();
  }
  @else {
    @warn "Column number argument must either be the string 'auto' or a number greater than 0 and less than or equal to total number of columns in the grid (#{$civic-grid-columns})";
  }
}

//
// Condition to run inside of the col mixin.
//
// Do not use directly.
//
@mixin _civic-grid-col($breakpoint: 'xs', $col-number: 'auto') {
  // If no breakpoint is passed and a col number is just use the first arg as
  // the col number and act like xs.
  @if type-of($breakpoint) == number {
    $col-number: $breakpoint;

    @include _civic-col-condition($col-number);
  }
  @else if $breakpoint == $civic-grid-lowest-breakpoint {
    @include _civic-col-condition($col-number);
  }
  @else {
    @include civic-breakpoint($breakpoint) {
      @include _civic-col-condition($col-number);
    }
  }
}

//
// Mixin to run inside of for loop - creates col/breakpoint classes.
//
// Do not use directly.
//
@mixin _civic-col-factory($thisPrefix) {
  .col-#{$thisPrefix} {
    box-sizing: border-box;
    flex-grow: 1;
    flex-basis: 0;
    max-width: 100%;

    @include _civic-print-all-gutters();
  }

  @for $i from 1 through $civic-grid-columns {
    .col-#{$thisPrefix}-#{$i} {
      box-sizing: border-box;
      flex-basis: math.div(100%, $civic-grid-columns) * $i;
      max-width: math.div(100%, $civic-grid-columns) * $i;

      @include _civic-print-all-gutters();
    }

    .col-#{$thisPrefix}-offset-#{$i} {
      margin-left: math.div(100%, $civic-grid-columns) * $i;
    }
  }

  .col-#{$thisPrefix}-offset-0 {
    margin-left: 0;
  }

  .row.start-#{$thisPrefix} {
    justify-content: flex-start;
  }

  .row.center-#{$thisPrefix} {
    justify-content: center;
  }

  .row.end-#{$thisPrefix} {
    justify-content: flex-end;
  }

  .row.top-#{$thisPrefix} {
    align-items: flex-start;
  }

  .row.middle-#{$thisPrefix} {
    align-items: center;
  }

  .row.bottom-#{$thisPrefix} {
    align-items: flex-end;
  }

  .row.around-#{$thisPrefix} {
    justify-content: space-around;
  }

  .row.between-#{$thisPrefix} {
    justify-content: space-between;
  }

  .first-#{$thisPrefix} {
    order: -1;
  }

  .last-#{$thisPrefix} {
    order: 1;
  }
}

//
// Offset column.
//
@mixin civic-col-offset($column_num) {
  margin-left: math.div(100%, $civic-grid-columns) * $column_num;
}

//
// Container class should wrap every row.
//
@mixin civic-container() {
  margin: 0 auto;

  // Support super-narrow screens as well.
  $width: map.get($civic-grid-offsets, xs) * 2;

  max-width: calc(100% - #{$width});

  // Set width for container at each breakpoint accounting for offsets at this
  // breakpoint.
  @each $bp, $value in $civic-breakpoints {
    @include civic-breakpoint($bp) {
      max-width: map.get($civic-breakpoints, $bp) - (map.get($civic-grid-offsets, $bp) * 2);
    }
  }
}
