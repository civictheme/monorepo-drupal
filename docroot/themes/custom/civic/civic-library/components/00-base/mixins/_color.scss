@use "sass:map";

//
// Color mixins.
//

//
// Get a color from the pre-defined list of colors.
//
@function civic-color($name) {
  $all-colors: civic-all-colors();
  @if map-get($all-colors, $name) == null {
    @error '"#{$name}" is not an available color.';
  }
  @return map.get($all-colors, $name);
}

//
// Do not use.
// This provides only base color palette access. Used for generating the other
// derivative palettes (e.g. shades / neutrals / elements).
// Use civic-color(name) instead.
//
@function civic-base-color($name) {
  @return map.get(map.merge($civic-default-colors, $civic-colors), $name);
}

//
// Helper class to compile all colors into a single map.
// For resolving names to colors, use civic-color(name) instead.
//
@function civic-all-colors() {
  $all-colors: ();
  $all-colors: map.merge($all-colors, $civic-default-colors);
  $all-colors: map.merge($all-colors, $civic-default-colors-shades);
  $all-colors: map.merge($all-colors, $civic-default-colors-neutrals);
  $all-colors: map.merge($all-colors, $civic-default-colors-elements);
  $all-colors: map.merge($all-colors, $civic-colors);
  @return $all-colors;
}

@function civic-encode-color($string) {
  @if type-of($string) == 'color' and str-index(#{$string}, '#') == 1 {
    $hex: str-slice(ie-hex-str($string), 4);
    $string: unquote('#{$hex}');

    @return '%23' + $string;
  }

  @return $string;
}

@function civic-svg-fill($svg, $color) {
  @return str_replace($svg, "fill=''", "fill='#{civic-encode-color($color)}'");
}
