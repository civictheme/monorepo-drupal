//
// Color mixins.
//

@use 'sass:color';
@use 'sass:map';
@use 'sass:math';
@use 'sass:string';

//
// Get a color or a color variant from the pre-defined list of colors.
//
@function civictheme-color($name, $idx: null) {
  @if $idx != null {
    $all-colors-variants: _civictheme-colors-variants-all();
    $name: '#{$name}-variant#{$idx}';

    @if map.get($all-colors-variants, $name) != null {
      @return map.get($all-colors-variants, $name);
    }
    @else {
      @error '"#{$name}" is not an available color variant.';
    }
  }

  $all-colors: _civictheme-colors-all();

  @if map.get($all-colors, $name) != null {
    @return map.get($all-colors, $name);
  }

  @error '"#{$name}" is not an available color.';
}

//
// Color shade. Do not use on components directly - map to a color variant instead.
//
@function civictheme-color-shade($number, $base) {
  @return color.mix(black, $base, math.percentage(math.div($number, 100)));
}

//
// Color tint. Do not use on components directly - map to a color variant instead.
//
@function civictheme-color-tint($number, $base) {
  @return color.mix(white, $base, math.percentage(math.div($number, 100)));
}

//
// Color tone. Do not use on components directly - map to a color variant instead.
//
@function civictheme-color-tone($number, $base) {
  $neutral: color.adjust(color.adjust($base, $saturation: -20%), $lightness: -1 * math.max(color.lightness($base) - 5%, 0%));

  @return color.mix($neutral, white, math.percentage(math.div($number, 100)));
}

//
// Compile all colors into a single map.
//
// Do not use directly.
// Use @include civictheme-color() mixin instead.
//
// stylelint-disable-next-line scss/at-function-pattern
@function _civictheme-colors-all() {
  @return map.merge($civictheme-colors-default, $civictheme-colors);
}

//
// Compile all color variants into a single map.
//
// Do not use directly.
// Use @include civictheme-color() mixin instead.
//
// stylelint-disable-next-line scss/at-function-pattern
@function _civictheme-colors-variants-all() {
  @return map.merge($civictheme-colors-variants-default, $civictheme-colors-variants);
}

//
// Encode color to be suitable for embedding.
//
@function civictheme-color-encode($string) {
  @if type-of($string) == 'color' and string.index(#{$string}, '#') == 1 {
    $hex: string.slice(color.ie-hex-str($string), 4);
    $string: string.unquote('#{$hex}');

    @return '%23' + $string;
  }

  @return $string;
}

//
// String to fill SVG with color.
//
@function civictheme-color-svg-fill($svg, $color) {
  @return civictheme-str-replace($svg, "fill=''", "fill='#{civictheme-color-encode($color)}'");
}
