//
// Color mixins.
//

@use 'sass:color';
@use 'sass:map';
@use 'sass:math';
@use 'sass:string';

//
// Retrieve light theme color.
//
@function civictheme-color-light($name) {
  @return _civictheme-color($name, 'light');
}

//
// Retrieve dark theme color.
//
@function civictheme-color-dark($name) {
  @return _civictheme-color($name, 'dark');
}

//
// Color shade. Do not use on components directly - map to a color variant instead.
//
@function civictheme-color-shade($color, $number) {
  @return color.mix(black, $color, math.percentage(math.div($number, 100)));
}

//
// Color tint. Do not use on components directly - map to a color variant instead.
//
@function civictheme-color-tint($color, $number) {
  @return color.mix(white, $color, math.percentage(math.div($number, 100)));
}

//
// Color tone. Do not use on components directly - map to a color variant instead.
//
@function civictheme-color-tone($base, $color) {
  $neutral: color.adjust(color.adjust($base, $saturation: -20%), $lightness: -1 * math.max(color.lightness($base) - 5%, 0%));

  @return color.mix($neutral, white, math.percentage(math.div($color, 100)));
}

//
// Encode color to be suitable for embedding.
//
@function civictheme-color-encode($string) {
  @if type-of($string) == 'color' and string.index(#{$string}, '#') == 1 {
    $hex: string.slice(color.ie-hex-str($string), 4);
    $string: string.unquote('#{$hex}');

    @return '%23' + $string;
  }

  @return $string;
}

//
// String to fill SVG with color.
//
@function civictheme-color-svg-fill($svg, $color) {
  @return civictheme-str-replace($svg, "fill=''", "fill='#{civictheme-color-encode($color)}'");
}

//
// Get a color from the pre-defined list of colors.
//
// stylelint-disable-next-line scss/at-function-pattern
@function _civictheme-color($name, $theme) {
  @if $theme != 'light' and $theme != 'dark' {
    @error '"#{$theme}" is not an available theme.';
  }

  $colors: map.deep-merge(_civictheme-colors(), _civictheme-colors-brands());
  $color: map.get(map.get($colors, $theme), $name);

  @if $color == null {
    @error '"#{$name}" is not an available color.';
  }

  @return $color;
}

//
// Retrieve all palette colors.
//
// Do not use directly.
//
// stylelint-disable-next-line scss/at-function-pattern
@function _civictheme-colors() {
  $civictheme-colors-default: (
    'light': (),
    'dark': ()
  ) !default;
  $civictheme-colors: (
    'light': (),
    'dark': ()
  ) !default;

  @return map.deep-merge($civictheme-colors-default, $civictheme-colors);
}

//
// Retrieve all brand colors.
//
// Do not use directly.
//
// stylelint-disable-next-line scss/at-function-pattern
@function _civictheme-colors-brands() {
  $civictheme-colors-brands: (
    'light': (),
    'dark': ()
  ) !default;

  @return $civictheme-colors-brands;
}
