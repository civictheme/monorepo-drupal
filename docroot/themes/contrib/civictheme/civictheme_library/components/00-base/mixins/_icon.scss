//
// Icon mixins.
//

@use 'sass:map';
@use 'sass:list';
@use 'sass:string';

//
// Get icon size at breakpoint.
//
@function civictheme-icon-size-dimension($size, $breakpoint, $dimension) {
  $all-icon-sizes: _civictheme-icon-sizes-all();

  @if map.get($all-icon-sizes, $size) == null {
    @error '"#{$size}" is not an available size.';
  }

  $size-at-breakpoints: map.get($all-icon-sizes, $size);

  @if map.get($size-at-breakpoints, $breakpoint) == null {
    @error '"#{$breakpoint}" is not an available breakpoint for size #{$size}.';
  }

  $dimensions: map.get($size-at-breakpoints, $breakpoint);

  @if list.length($dimensions) != 2 {
    @error 'Dimenstions list must contain exactly 2 entries for icon size #{$size} at breakpoint #{$breakpoint}.';
  }

  $value: '';

  @if $dimension == 'width' {
    $value: list.nth($dimensions, 1);
  }
  @else if $dimension == 'height' {
    $value: list.nth($dimensions, 2);
  }

  @if civictheme-string-is-quoted($value) {
    $value: string.unquote($value);
  }

  @if $value {
    @return rem($value);
  }

  @error '"#{$dimension}" is not an available dimension for size #{$size} at breakpoint #{$breakpoint}.';
}

//
// Compile all icon symbols into a single map.
//
// stylelint-disable-next-line scss/at-function-pattern
@function _civictheme-icon-symbols-all() {
  @return map.merge($civictheme-icon-symbols-default, $civictheme-icon-symbols);
}

//
// Compile all icon sizes into a single map.
//
// Do not use directly.
// Use @include civictheme-icon-size-dimension() function instead.
//
// stylelint-disable-next-line scss/at-function-pattern
@function _civictheme-icon-sizes-all() {
  @return map.merge($civictheme-icon-sizes-default, $civictheme-icon-sizes);
}

//
// Include icon width, height for one-to-many breakpoints.
//
// @include civictheme-icon-size('regular');
//
@mixin civictheme-icon-size($size) {
  $all-icon-sizes: _civictheme-icon-sizes-all();

  @if map.get($all-icon-sizes, $size) == null {
    @error '"#{$size}" is not an available size.';
  }

  $size-at-breakpoints: map.get($all-icon-sizes, $size);
  $breakpoints: map.keys($size-at-breakpoints);

  @each $breakpoint in $breakpoints {
    @include civictheme-breakpoint($breakpoint) {
      width: civictheme-icon-size-dimension($size, $breakpoint, 'width');
      height: civictheme-icon-size-dimension($size, $breakpoint, 'height');
    }
  }
}

//
// Fill icon color.
//
@mixin civictheme-icon-fill-color($color, $self: false) {
  @if $self {
    &.civictheme-icon {
      fill: $color;
    }
  }
  @else {
    .civictheme-icon {
      fill: $color;
    }
  }
}
