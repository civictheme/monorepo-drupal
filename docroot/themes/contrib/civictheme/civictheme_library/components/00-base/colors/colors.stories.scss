//
// Color stories.
//

@use 'sass:string';
@use 'sass:math';
@use 'sass:map';

//
// Mixin to create a color box with specific dimensions.
//
@mixin civictheme-stories-color-box($key, $value, $width: 100px, $height: 100px ) {
  $border-color: transparent;

  @if $value == #fff or $value == #0000 {
    $border-color: #ccd4d8;
  }

  width: $width;
  height: $height;
  margin: 0 8px 100px;
  border: 1px solid $border-color;
  border-radius: math.div($width, 10);
  position: relative;
  background-color: $value;

  $content: civictheme-str-replace(string.to-upper-case(string.slice($key, 1, 1)) + string.slice($key, 2), '-', ' ') + '\A' + string.to-upper-case(#{$value});

  &::after {
    content: '#{$content}';
    text-align: center;
    display: block;
    padding: 1em 0;
    position: absolute;
    top: 100%;
    font-family: 'Courier New', monospace, sans-serif;
    font-size: 80%;
    line-height: 150%;
  }
}

.story-colors-wrapper {
  display: flex;
  flex-flow: row wrap;

  // Standard colors.
  $all-colors: _civictheme-colors-all();

  // Remove translucent as this is not a color.
  // @todo Remove this once 'translucent' is moved into a separate variable.
  $all-colors: map.remove($all-colors, 'translucent');

  @include civictheme-generate-class-variations-from-map($all-colors, 'story-color') using($key, $value, $index) {
    @include civictheme-stories-color-box($key, $value, 100px, 100px);
  }

  // Visually separate service colors with a spacing.
  .story-color--accent,
  .story-color--outline,
  .story-color--status {
    margin-left: 50px;
  }

  // Color variants.
  $all-colors-variants: _civictheme-colors-variants-all();

  @include civictheme-generate-class-variations-from-map($all-colors-variants, 'story-color') using($key, $value, $index) {
    @include civictheme-stories-color-box($key, $value, 80px, 80px);
  }

  // Shades.
  $dark-shades: ();
  $light-shades: ();
  $neutrals: ();

  @for $i from 0 through 100 {
    $dark-shades: map.merge($dark-shades, ('dark-shade-#{$i}': civictheme-color-shade-dark($i)));
    $light-shades: map.merge($light-shades, ('light-shade-#{$i}': civictheme-color-shade-light($i)));
    $neutrals: map.merge($neutrals, ('neutral-#{$i}': civictheme-color-neutral($i)));
  }

  $all-colors-automated: ();
  $all-colors-automated: map.merge($all-colors-automated, $dark-shades);
  $all-colors-automated: map.merge($all-colors-automated, $light-shades);
  $all-colors-automated: map.merge($all-colors-automated, $neutrals);

  @include civictheme-generate-class-variations-from-map($all-colors-automated, 'story-color') using($key, $value, $index) {
    @include civictheme-stories-color-box($key, $value, 50px, 50px);
  }
}
