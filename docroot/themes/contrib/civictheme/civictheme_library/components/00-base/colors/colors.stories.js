export default {
  title: 'Base/Colors',
};

export const Colors = () => {
  const vars = { ...SCSS_VARIABLES };

  const types = {};

  // Standard colors.
  types['civictheme-colors-default'] = 'Standard colors';

  // Generate unique color variant groups to generate types from group names.
  const colorsVariants = vars['civictheme-colors-variants'].concat(vars['civictheme-colors-variants-default'].filter((item) => vars['civictheme-colors-variants'].indexOf(item) < 0));
  const colorsVariantGroups = {};
  for (const i in colorsVariants) {
    const groupName = colorsVariants[i].match(/(.*)-variant/)[1] || null;
    if (groupName) {
      if (!Object.prototype.hasOwnProperty.call(colorsVariantGroups, groupName)) {
        colorsVariantGroups[groupName] = [];
      }
      colorsVariantGroups[groupName].push(colorsVariants[i]);
    }
  }
  for (const name in colorsVariantGroups) {
    types[`civictheme-colors-variants-default-${name}`] = `${name.charAt(0).toUpperCase() + name.slice(1)} colors variants`;
    vars[`civictheme-colors-variants-default-${name}`] = colorsVariantGroups[name].sort((a, b) => a.localeCompare(b, navigator.languages[0] || navigator.language, {
      numeric: true,
      sensitivity: 'base',
    }));
  }

  // Custom colors without overrides of standard colors.
  types['civictheme-colors'] = 'Custom colors';
  vars['civictheme-colors'] = vars['civictheme-colors'].filter((n) => vars['civictheme-colors-default'].indexOf(n) === -1);

  // Shades.
  types['civictheme-colors-default-shades-dark'] = 'Generated Dark shades';
  types['civictheme-colors-default-shades-light'] = 'Generated Light shades';
  types['civictheme-colors-default-neutrals'] = 'Generated Neutrals';

  vars['civictheme-colors-default-shades-dark'] = [];
  vars['civictheme-colors-default-shades-light'] = [];
  vars['civictheme-colors-default-neutrals'] = [];
  for (let i = 0; i <= 100; i += 10) {
    vars['civictheme-colors-default-shades-dark'].push(`dark-shade-${i}`);
    vars['civictheme-colors-default-shades-light'].push(`light-shade-${i}`);
    vars['civictheme-colors-default-neutrals'].push(`neutral-${i}`);
  }

  let html = '';

  let variantDocsShown = false;
  let autogeneratedDocsShown = false;
  for (const name in types) {
    if (Object.values(vars[name]).length > 0) {
      if (name.includes('variant') && !variantDocsShown) {
        html += '<div class="docs-container">Color variants are customizable set of colors, mapped to automatically generated color shades by default.<br/>These can be easily re-mapped to custom values, if required.</div>';
        variantDocsShown = true;
      }

      if ((name.includes('shades') || name.includes('neutrals')) && !autogeneratedDocsShown) {
        html += '<div class="docs-container">Color shades are automatically generated derivatives from Standard colors.</div>';
        autogeneratedDocsShown = true;
      }

      html += `<div class="example-container">`;
      html += `<div class="example-container__title">${types[name]}</div>`;
      html += `<div class="example-container__content story-colors-wrapper story-wrapper-size--large">`;
      for (const i in Object.values(vars[name])) {
        html += `<div class="example-container__content story-color--${vars[name][i]}"></div>`;
      }
      html += `</div>`;
      html += `</div>`;
    }
  }

  return html;
};
