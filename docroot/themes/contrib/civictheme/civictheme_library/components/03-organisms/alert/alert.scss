//
// Alert component.
//

@use 'sass:map';

.ct-alert {
  $root: &;

  position: relative;
  padding: ct-spacing(2);

  @include ct-breakpoint('m') {
    padding: ct-spacing(3);
  }

  @include ct-typography('label-small');

  border-bottom: 1px solid;

  &:last-child {
    border-bottom: none;
  }

  #{$root}__title {
    @include ct-typography('heading-6');

    display: flex;
    align-items: center;

    @include ct-breakpoint-upto('m') {
      margin-bottom: ct-spacing();
    }
  }

  #{$root}__icon {
    width: rem(24px);
    margin-right: ct-spacing();

    @include ct-breakpoint('m') {
      margin-right: ct-spacing(2);
    }
  }

  .ct-icon {
    width: rem(24px);
    height: rem(24px);
  }

  #{$root}__summary {
    display: flex;
    align-items: center;

    @include ct-breakpoint(m) {
      position: relative;
    }
  }

  #{$root}__dismiss-button {
    cursor: pointer;
    margin-left: ct-spacing(3);
    position: absolute;
    top: ct-spacing(2);
    right: ct-spacing(2);
    background-color: transparent;
    padding: 0;

    @include ct-breakpoint(m) {
      position: static;
      align-self: center;
      margin-left: auto;
    }
  }

  // SASS does not allow variables interpolation, so we are creating a local
  // map to easily generate rules.
  &.ct-theme-light {
    border-color: $ct-alert-light-divider-color;
  }

  &.ct-theme-dark {
    border-color: $ct-alert-dark-divider-color;
  }

  $map: (
    'information': (
      'light': (
        'color': $ct-alert-light-information-color,
        'background-color': $ct-alert-light-information-background-color,
        'icon-color': $ct-alert-light-information-icon-color,
      ),
      'dark': (
        'color': $ct-alert-dark-information-color,
        'background-color': $ct-alert-dark-information-background-color,
        'icon-color': $ct-alert-dark-information-icon-color,
      )
    ),
    'warning': (
      'light': (
        'color': $ct-alert-light-warning-color,
        'background-color': $ct-alert-light-warning-background-color,
        'icon-color': $ct-alert-light-warning-icon-color,
      ),
      'dark': (
        'color': $ct-alert-dark-warning-color,
        'background-color': $ct-alert-dark-warning-background-color,
        'icon-color': $ct-alert-dark-warning-icon-color,
      )
    ),
    'error': (
      'light': (
        'color': $ct-alert-light-error-color,
        'background-color': $ct-alert-light-error-background-color,
        'icon-color': $ct-alert-light-error-icon-color,
      ),
      'dark': (
        'color': $ct-alert-dark-error-color,
        'background-color': $ct-alert-dark-error-background-color,
        'icon-color': $ct-alert-dark-error-icon-color,
      )
    ),
    'success': (
      'light': (
        'color': $ct-alert-light-success-color,
        'background-color': $ct-alert-light-success-background-color,
        'icon-color': $ct-alert-light-success-icon-color,
      ),
      'dark': (
        'color': $ct-alert-dark-success-color,
        'background-color': $ct-alert-dark-success-background-color,
        'icon-color': $ct-alert-dark-success-icon-color,
      )
    ),
  );

  @each $type, $type-map in $map {
    &#{$root}--#{$type} {
      @each $theme, $values in $type-map {
        &.ct-theme-#{$theme} {
          background-color: map.get($values, 'background-color');
          color: map.get($values, 'color');

          #{$root}__dismiss-button,
          #{$root}__icon {
            .ct-icon {
              background-color: map.get($values, 'icon-color');
            }
          }
        }
      }
    }
  }
}
