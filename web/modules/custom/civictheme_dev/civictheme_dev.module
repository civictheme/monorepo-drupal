<?php

/**
 * @file
 * Development module for CivicTheme Source site.
 */

declare(strict_types=1);

use Drupal\civictheme\CivicthemeConstants;
use Drupal\civictheme\CivicthemeVersionManager;
use Drupal\Core\Site\Settings;
use Drupal\views\ViewExecutable;

require_once __DIR__ . '/styleguide.inc';

/**
 * Implements hook_mail_alter().
 */
function civictheme_dev_mail_alter(array &$message): void {
  // Allow to stop any mail send out through settings. Note if email
  // functionality needs to be tested, this code should be removed and
  // replaced with a dev mail system.
  if (Settings::get('suspend_mail_send')) {
    $message['send'] = FALSE;
  }
}

/**
 * Implements hook_preprocess_html().
 */
function civictheme_dev_preprocess_html(array &$variables): void {
  /** @var \Drupal\civictheme\CivicthemeVersionManager $version_manager */
  $version_manager = \Drupal::classResolver(CivicthemeVersionManager::class);
  $variables['page_bottom']['civictheme_version'] = $version_manager->render('body');
}

/**
 * Implements hook_styleguide_alter().
 */
function civictheme_dev_styleguide_alter(array &$items): void {
  // Remove password_confirm field from the form as CivicTheme does not support
  // it.
  unset($items['form']['content']['password_confirm']);

  _civictheme_dev_styleguide__form_test__textfield($items);
  _civictheme_dev_styleguide__form_test__textarea($items);
  _civictheme_dev_styleguide__form_test__select($items);
  _civictheme_dev_styleguide__form_test__checkbox($items);
  _civictheme_dev_styleguide__form_test__checkboxes($items);
  _civictheme_dev_styleguide__form_test__radios($items);
}

/**
 * Implements hook_civictheme_automated_list_view_info_alter().
 */
function civictheme_dev_civictheme_automated_list_view_info_alter(array &$info, array $settings): void {
  if ($settings['content_type'] == 'civictheme_event') {
    // Use a different view and display for 'civictheme_event' content type.
    $info['view_name'] = 'civictheme_automated_list_examples';
    $info['display_name'] = 'page_multiple_filters';
  }
}

/**
 * Implements hook_civictheme_automated_list_view_alter().
 */
function civictheme_dev_civictheme_automated_list_view_alter(ViewExecutable $view): void {
  if ($view->id() === 'civictheme_automated_list_test') {
    if (!property_exists($view, 'component_settings') || $view->component_settings === NULL) {
      return;
    }

    $view->component_settings['theme'] = CivicthemeConstants::THEME_LIGHT;
    $view->component_settings['item_theme'] = CivicthemeConstants::THEME_DARK;

    // Example of setting view arguments based on the expected contextual
    // filters of this specific view.
    $view_args = [];
    // First view argument - content types.
    $view_args[] = $view->component_settings['content_type'] ?? 'all';
    // Second view argument - Topics.
    $view_args[] = empty($view->component_settings['topics']) ? 'all' : implode('+', array_keys($view->component_settings['topics']));
    // Third view argument - Site Sections.
    $view_args[] = empty($view->component_settings['site_sections']) ? 'all' : implode('+', array_keys($view->component_settings['site_sections']));
    // Fourth view argument - Content ID value.
    $view_args[] = 'all';
    // Fifth view argument - Vertical Spacing value (used as an example).
    $view_args[] = CivicthemeConstants::VERTICAL_SPACING_TOP;

    $view->setArguments($view_args);
  }
}
