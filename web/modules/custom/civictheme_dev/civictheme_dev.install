<?php

/**
 * @file
 * Install file for core.
 */

declare(strict_types=1);

use Drupal\Core\Database\Database;
use Drupal\Core\Database\StatementInterface;
use Drupal\user\Entity\User;

/**
 * Implements hook_install().
 */
function civictheme_dev_install(): void {
  // Assign user 1 the "administrator" role.
  /** @var \Drupal\user\Entity\User $user */
  $user = User::load(1);
  $user->addRole('administrator');
  $user->save();

  \Drupal::moduleHandler()->loadInclude('civictheme_dev', 'php', 'civictheme_dev.post_update');
  $functions = get_defined_functions();

  // Run all update functions when installing this module.
  foreach ($functions['user'] as $function) {
    if (str_starts_with($function, 'civictheme_dev_update_')) {
      $sandbox = [];
      call_user_func($function, $sandbox);
    }
  }

  // Run all post-update functions when installing this module.
  $key_value = \Drupal::keyValue('post_update');
  $executed_updates = $key_value->get('existing_updates', []);
  foreach ($executed_updates as $function) {
    if (str_starts_with((string) $function, 'civictheme_dev_post_update_')) {
      print sprintf('Running post-update function: %s%s', $function, PHP_EOL);
      $sandbox = [];
      $ret = call_user_func($function, $sandbox);
      if (is_string($ret)) {
        print $ret . PHP_EOL;
      }
    }
  }
}

/**
 * Update database charset and collation to utf8mb4.
 *
 * @return string
 *   A message indicating completion of the update.
 *
 * @throws \Exception
 */
function civictheme_dev_update_10001(): string {
  /** @var \Drupal\Core\Database\Connection $database */
  $database = Database::getConnection();
  $charset = $database->getConnectionOptions()['charset'] ?? 'utf8mb4';
  $collation = $database->getConnectionOptions()['collation'] ?? 'utf8mb4_general_ci';

  echo PHP_EOL;
  echo 'Current Charset: ' . $charset, PHP_EOL;
  echo 'Current Collation: ' . $collation, PHP_EOL;

  // Retrieve and display the default character set and collation.
  $query = $database->query('SELECT @@character_set_database AS charset, @@collation_database AS collation');
  assert($query instanceof StatementInterface);
  $defaultSettings = $query->fetchAssoc();
  if ($defaultSettings !== FALSE && is_array($defaultSettings)) {
    echo 'Default Character Set: ' . $defaultSettings['charset'], PHP_EOL;
    echo 'Default Collation: ' . $defaultSettings['collation'], PHP_EOL;
  }

  // Retrieve tables with different collation.
  $query = $database->query('SHOW TABLE STATUS WHERE Collation <> :collation', [':collation' => $collation]);
  assert($query instanceof StatementInterface);
  /** @var array<string, array<string, mixed>> $tables */
  $tables = $query->fetchAllAssoc('Name');
  $tableCount = count($tables);

  if ($tableCount !== 0) {
    echo 'Converting collation of ', $tableCount, ' tables to ', $collation, PHP_EOL;
    foreach (array_keys($tables) as $table_name) {
      echo '- Altering table ', $table_name, PHP_EOL;
      try {
        // Perform the collation change.
        $database->query('ALTER TABLE `' . $table_name . '` CONVERT TO CHARACTER SET ' . $charset . ' COLLATE ' . $collation . ';');
        echo sprintf('Success: %s collation changed to %s', $table_name, $collation), PHP_EOL;
      }
      catch (\Exception $e) {
        // Catch and display any errors during the ALTER TABLE operation.
        echo sprintf('Error altering table %s: ', $table_name), $e->getMessage(), PHP_EOL;
      }
    }

    // Check again for any tables not using the specified collation.
    $query = $database->query('SHOW TABLE STATUS WHERE Collation <> :collation', [':collation' => $collation]);
    assert($query instanceof StatementInterface);
    /** @var array<string, array<string, mixed>> $leftover_tables */
    $leftover_tables = $query->fetchAllAssoc('Name');
    $leftoverCount = count($leftover_tables);

    if ($leftoverCount === 0) {
      echo 'DONE: All tables are using the collation ', $collation, PHP_EOL;
    }
    else {
      echo $leftoverCount, ' tables not using the collation ', $collation, PHP_EOL;
      foreach (array_keys($leftover_tables) as $table_name) {
        echo ' - ', $table_name, ' still not converted.', PHP_EOL;
      }
    }
  }
  else {
    echo 'No action needed: All tables are already using the collation ', $collation, PHP_EOL;
  }

  return (string) t('Database charset and collation update completed.');
}

/**
 * Display tables that don't use utf8mb4_general_ci collation.
 *
 * @return string
 *   A message indicating completion of the check.
 *
 * @throws \Exception
 */
function civictheme_dev_update_10002(): string {
  /** @var \Drupal\Core\Database\Connection $database */
  $database = Database::getConnection();
  $target_collation = 'utf8mb4_general_ci';

  // Retrieve and display tables with different collation.
  $query = $database->query('SHOW TABLE STATUS WHERE Collation <> :collation', [':collation' => $target_collation]);
  assert($query instanceof StatementInterface);
  /** @var array<int, object{Name: string, Collation: string}> $tables */
  $tables = $query->fetchAll();

  echo PHP_EOL;
  echo sprintf('Tables not using %s collation:', $target_collation), PHP_EOL;
  echo "----------------------------------------", PHP_EOL;

  if (empty($tables)) {
    echo sprintf('All tables are using %s collation.', $target_collation), PHP_EOL;
  }
  else {
    echo sprintf("Found %d tables with different collation:", count($tables)), PHP_EOL;
    foreach ($tables as $table) {
      echo sprintf("Table: %-50s Collation: %s", $table->Name, $table->Collation), PHP_EOL;
    }
  }

  return (string) t('Database collation check completed.');
}

/**
 * Implements hook_requirements().
 *
 * @phpstan-return array<string, array{
 *   title: string,
 *   value: string,
 *   severity: int,
 *   description?: string
 * }>
 */
function civictheme_dev_requirements(string $phase): array {
  $requirements = [];

  if ($phase === 'runtime') {
    /** @var \Drupal\Core\Database\Connection $database */
    $database = Database::getConnection();
    $target_collation = 'utf8mb4_general_ci';

    // Retrieve tables with different collation.
    $query = $database->query('SHOW TABLE STATUS WHERE Collation <> :collation', [':collation' => $target_collation]);
    assert($query instanceof StatementInterface);
    /** @var array<int, object{Name: string, Collation: string}> $tables */
    $tables = $query->fetchAll();
    $tableCount = count($tables);

    if (empty($tables)) {
      $status = 'All tables are using utf8mb4_general_ci collation.';
      $severity = REQUIREMENT_OK;
    }
    else {
      $table_list = [];
      foreach ($tables as $table) {
        $table_list[] = $table->Name . ' (' . $table->Collation . ')';
      }
      $status = sprintf(
        'Found %d tables with non-standard collation: %s',
        $tableCount,
        implode(', ', $table_list)
      );
      $severity = REQUIREMENT_ERROR;
    }

    $requirements['civictheme_dev_database_collation'] = [
      'title' => (string) t('Database Tables Collation'),
      'value' => $status,
      'severity' => $severity,
      'description' => (string) t('All database tables should use utf8mb4_general_ci collation for optimal compatibility.'),
    ];
  }

  return $requirements;
}
