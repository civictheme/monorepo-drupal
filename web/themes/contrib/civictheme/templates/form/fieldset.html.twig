{#
/**
 * @file
 * CivicTheme implementation to display a fieldset.
 */
#}

{% if element is defined and (element["#type"] == "checkboxes" or element["#type"] == "radios") %}
  {# TODO: Move these to a preprocess. #}

  {% set field_type = element["#type"] == "checkboxes" ? "checkbox" : "radio" %}

  {% set control_filtered_attributes = element['#attributes']|filter((v, k) => k starts with 'data' or k in ['size', 'maxlength', 'autocomplete']) %}
  {% set control_attributes = control_filtered_attributes|map((v, k) => k ~ '="' ~ v ~ '"')|join(' ') %}
  {% set control_modifier_class = element['#attributes']['class']|default([]) %}
  {% set control_modifier_class = control_modifier_class is iterable ? control_modifier_class|join(' ') : control_modifier_class %}

  {% set control = [] %}

  {% for key, option in element['#options'] %}
    {% set control_name = element['#attributes']['name']|default(element['#name']|default('')) %}
    {% set control = control|merge([{
      attributes: control_attributes,
      name: field_type == "checkbox" ? control_name ~ '[' ~ key ~ ']' : control_name,
      value: key,
      id: element['#id'] ~ '-' ~ key,
      label: option,
      is_checked: element['#default_value'] is iterable ? key in element['#default_value'] : element['#default_value'] == key,
      is_disabled: element['#attributes']['disabled'] is defined,
      modifier_class: control_modifier_class,
    }]) %}
  {% endfor %}

  {% set type = element['#type']|default('input') %}
  {% set is_required = element['#required']|default(false) %}
  {% set is_disabled = element['#attributes']['disabled'] is defined %}
  {% set label = element['#title']|default('') %}
  {% set description = element['#description']|default('') %}

  {% include "@molecules/field/field.twig" with {
    label: legend.title,
    type: field_type,
    orientation: orientation is defined ? orientation : 'vertical',
    is_inline: element['#options_display'] is defined and (element['#options_display'] == "inline" or element['#options_display'] == "side_by_side") ? 'horizontal' : 'vertical',
    is_required: is_required,
    is_disabled: is_disabled,
    description: description,
    modifier_class: modifier_class,
    message: element['#errors'] is defined ? element['#errors']|raw : '',
    is_invalid: element['#errors'] is defined and element['#errors'] is not empty,
    control: control,
  } only %}
{% else %}
  {% include "@atoms/fieldset/fieldset.twig" with {
    legend: legend.title,
    description: description.content,
    description_display: description_display,
    message: errors,
    fields: children,
    is_required: required,
    modifier_class: modifier_class,
    prefix: prefix,
    suffix: suffix,
    attributes: attributes is iterable ? attributes|join(' ') : attributes,
  } only %}
{% endif %}
