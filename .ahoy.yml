#
# Ahoy configuration file.
# http://www.ahoycli.com/
#
# Provides development experience shortcuts to work with the stack.
# Any command can be copy-pasted directly into terminal and ran without using
# Ahoy.
#
# Do not add values directly into this file. Use .env file instead.
# Run `ahoy up cli` to apply environment variables changes to containers.
---
ahoyapi: v2

commands:

  build:
    usage: Build or rebuild the project.
    cmd: |
      ahoy confirm "Running this command will remove your current database and files. Are you sure?" &&
      ./scripts/drevops/build.sh

  info:
    usage: Show information about this project.
    cmd: |
      docker-compose exec \
        -e COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME:-${PWD##*/}} \
        -e DREVOPS_HOST_DB_PORT=$(docker port $(docker-compose ps -q mariadb 2>/dev/null) 3306 2>/dev/null | cut -d : -f 2) \
        -e DREVOPS_DRUPAL_SHOW_LOGIN_LINK=${DREVOPS_DRUPAL_SHOW_LOGIN_LINK} \
        cli ./scripts/drevops/info.sh "$@"

  db:
    usage: Open DB in Sequel Ace.
    cmd: |
      uname -a | grep -i -q darwin && mdfind -name 'Sequel Ace'|grep -q "Ace" \
      && DREVOPS_HOST_DB_PORT="$(docker port $(docker-compose ps -q mariadb 2>/dev/null) 3306 2>/dev/null | cut -d : -f 2)" \
      && open "mysql://${DREVOPS_MARIADB_USER}:${DREVOPS_MARIADB_PASSWORD}@127.0.0.1:${DREVOPS_HOST_DB_PORT}/drupal" -a "Sequel Ace" \
      || echo "Not a supported OS or Sequel Ace is not installed."

  # ----------------------------------------------------------------------------
  # Docker commands.
  # ----------------------------------------------------------------------------

  up:
    usage: Build and start Docker containers.
    cmd: |
      docker-compose up -d "$@" && if docker-compose logs | grep -q "\[Error\]"; then exit 1; fi
      mkdir -p docroot/sites/default/files && docker-compose port cli 35729 | cut -d : -f 2 | xargs -I{} ahoy cli 'echo {} > /app/docroot/sites/default/files/livereload.sock'

  down:
    usage: Stop Docker containers and remove container, images, volumes and networks.
    cmd: |
      ahoy confirm "Running this command will remove your current database. Are you sure?" &&
      if [ -f "docker-compose.yml" ]; then docker-compose down --volumes > /dev/null 2>&1; fi

  start:
    usage: Start existing Docker containers.
    cmd: |
      docker-compose start "$@"
      mkdir -p docroot/sites/default/files && docker-compose port cli 35729 | cut -d : -f 2 | xargs -I{} ahoy cli 'echo {} > /app/docroot/sites/default/files/livereload.sock'

  stop:
    usage: Stop running Docker containers.
    cmd: docker-compose stop "$@"

  restart:
    usage: Restart stopped or running Docker containers.
    cmd: docker-compose restart "$@"

  logs:
    usage: Show Docker logs for services.
    cmd: docker-compose logs "$@"

  pull:
    usage: Pull latest Docker images.
    cmd: if [ ! -z "$(docker image ls -q)" ]; then docker image ls --format \"{{.Repository}}:{{.Tag}}\" | grep uselagoon/ | grep -v none | xargs -n1 docker pull -q | cat; fi

  cli:
    usage: Start a shell or run a command inside the CLI service container.
    # The shell is started if no arguments were provided to this command.
    cmd: if \[ "${#}" -ne 0 \]; then docker-compose exec -e COMPOSER=${COMPOSER:-} -T cli bash -c "$*"; else docker-compose exec cli bash; fi

  composer:
    usage: Run Composer commands in the CLI service container.
    cmd: docker-compose exec -T cli composer "$@"

  drush:
    usage: Run Drush commands in the CLI service container.
    cmd: docker-compose exec -T cli bash -c "drush -l ${DREVOPS_LOCALDEV_URL} $*"

  flush-redis:
    usage: Flush Redis cache.
    cmd: docker-compose exec redis redis-cli flushall

  # ----------------------------------------------------------------------------
  # Application commands.
  # ----------------------------------------------------------------------------

  login:
    usage: Login to a website.
    # Unblock user 1 and generate a one time login link.
    cmd: ahoy cli ./scripts/drevops/drupal-login.sh


  reload-db:
    usage: Reload the database container using local database image.
    cmd: |
      ahoy confirm "Running this command will replace your current database. Are you sure?" &&
      docker-compose rm -f -s -v mariadb && ahoy up -- --build mariadb && ahoy install-site && ahoy info && ahoy login ||
      echo "The operation was canceled."

  install-site:
    usage: Install a site.
    cmd: |
      docker-compose exec \
      -e DREVOPS_DRUPAL_INSTALL_OPERATIONS_SKIP=${DREVOPS_DRUPAL_INSTALL_OPERATIONS_SKIP:-} \
      -e DREVOPS_DRUPAL_INSTALL_OVERRIDE_EXISTING_DB=${DREVOPS_DRUPAL_INSTALL_OVERRIDE_EXISTING_DB:-0} \
      -e DREVOPS_DRUPAL_PROFILE=${DREVOPS_DRUPAL_PROFILE:-standard} \
      -e CIVICTHEME_SKIP_SUBTHEME_ACTIVATION=${CIVICTHEME_SKIP_SUBTHEME_ACTIVATION:-0} \
      -e CIVICTHEME_SKIP_SUBTHEME_ACTIVATION=${CIVICTHEME_SKIP_SUBTHEME_ACTIVATION:-0} \
      -e DREVOPS_DRUPAL_VERSION=${DREVOPS_DRUPAL_VERSION:-} \
      -e CIVICTHEME_CONTENT_PROFILE=${CIVICTHEME_CONTENT_PROFILE:-} \
      -e SKIP_SUBTHEME_FE=${SKIP_SUBTHEME_FE:-} \
      -e SKIP_GENERATED_CONTENT_CREATE=${SKIP_GENERATED_CONTENT_CREATE:-} \
      -T cli ./scripts/drevops/drupal-install-site.sh

  export-db:
    usage: Export database dump or database image (DREVOPS_DB_DOCKER_IMAGE variable must be set).
    cmd: |
      [ -z "${DREVOPS_DB_DOCKER_IMAGE}" ] && docker-compose exec -e DREVOPS_DB_DIR=${DREVOPS_DB_DIR:-} -T cli ./scripts/drevops/export-db-file.sh "$@" || \
      ( DREVOPS_DB_EXPORT_DOCKER_IMAGE="${DREVOPS_DB_DOCKER_IMAGE}" ./scripts/drevops/export-db-docker.sh "$@";
      if [ "${DREVOPS_EXPORT_DB_DOCKER_DEPLOY_PROCEED}" = "1" ]; then DREVOPS_DEPLOY_DOCKER_MAP=mariadb=${DREVOPS_DB_DOCKER_IMAGE} DREVOPS_DEPLOY_DOCKER_IMAGE_TAG=${DREVOPS_DOCKER_IMAGE_TAG} ./scripts/drevops/deploy-docker.sh; fi )

  pull-db:
    usage: Download database image with the latest nightly dump. Run "ahoy reload-db" to reload DB in the running stack.
    cmd: |
      [ -n "${DREVOPS_DB_DOCKER_IMAGE}" ] && docker pull $DREVOPS_DB_DOCKER_IMAGE

  clean:
    usage: Remove Docker containers and all build files.
    cmd: ahoy down && ./scripts/drevops/clean.sh

  reset:
    usage: "Remove containers, all build, uncommitted files."
    cmd: |
      ahoy confirm "All containers, build and uncomitted files will be removed, repository will be reset to the last commit. Proceed?" \
      && ahoy clean && ./scripts/drevops/reset.sh || echo "The operation was canceled."

  fei:
    usage: Install front-end assets.
    cmd: |
      ahoy cli "npm --prefix docroot/themes/contrib/${DREVOPS_DRUPAL_THEME}/civictheme_library install"
      ahoy cli "npm --prefix docroot/themes/contrib/${DREVOPS_DRUPAL_THEME} install"

  fe:
    usage: Build front-end assets.
    cmd: |
      ahoy cli "cd docroot/themes/contrib/${DREVOPS_DRUPAL_THEME}/civictheme_library && npm run build"
      ahoy cli "cd docroot/themes/contrib/${DREVOPS_DRUPAL_THEME} && npm run build"

  lint:
    usage: Lint back-end and front-end code.
    cmd: ahoy cli ./scripts/drevops/lint.sh "$@"

  lint-be:
    usage: Lint back-end code.
    cmd: ahoy cli ./scripts/drevops/lint.sh be

  lint-fe:
    usage: Lint front-end code.
    cmd: ahoy cli ./scripts/drevops/lint.sh fe

  lint-config:
    usage: Lint config
    cmd: ahoy cli ./scripts/drevops/lint.sh config

  test:
    usage: Run all tests.
    cmd: ahoy test-unit && ahoy test-kernel && ahoy test-functional && ahoy test-bdd

  test-unit:
    usage: Run PhpUnit unit tests.
    cmd: ahoy cli "DREVOPS_TEST_TYPE=unit DREVOPS_TEST_REPORTS_DIR=${DREVOPS_TEST_REPORTS_DIR} ./scripts/drevops/test.sh $@"

  test-kernel:
    usage: Run PhpUnit kernel tests.
    cmd: ahoy cli "DREVOPS_TEST_TYPE=kernel DREVOPS_TEST_ARTIFACT_DIR=${DREVOPS_TEST_ARTIFACT_DIR} DREVOPS_TEST_REPORTS_DIR=${DREVOPS_TEST_REPORTS_DIR} ./scripts/drevops/test.sh $@"

  test-functional:
    usage: Run PhpUnit functional tests.
    cmd: ahoy cli "DREVOPS_TEST_TYPE=functional DREVOPS_TEST_ARTIFACT_DIR=${DREVOPS_TEST_ARTIFACT_DIR} DREVOPS_TEST_REPORTS_DIR=${DREVOPS_TEST_REPORTS_DIR} ./scripts/drevops/test.sh $@"

  test-bdd:
    usage: Run BDD tests.
    cmd: ahoy cli "DREVOPS_TEST_TYPE=bdd DREVOPS_TEST_ARTIFACT_DIR=${DREVOPS_TEST_ARTIFACT_DIR} DREVOPS_TEST_REPORTS_DIR=${DREVOPS_TEST_REPORTS_DIR} DREVOPS_TEST_BEHAT_PROFILE=${DREVOPS_TEST_BEHAT_PROFILE:-} DREVOPS_TEST_BEHAT_FORMAT=${DREVOPS_TEST_BEHAT_FORMAT:-} DREVOPS_TEST_BEHAT_PARALLEL_INDEX=${DREVOPS_TEST_BEHAT_PARALLEL_INDEX:-} BEHAT_SCREENSHOT_PURGE=${BEHAT_SCREENSHOT_PURGE-} DREVOPS_TEST_BEHAT_TAGS=${DREVOPS_TEST_BEHAT_TAGS-} ./scripts/drevops/test.sh $@"

  test-bats:
    usage: Run Bats tests (host only).
    cmd: bats --tap tests/bats/


  debug:
    usage: Enable PHP Xdebug.
    cmd: ahoy cli php -v | grep -q Xdebug || XDEBUG_ENABLE=true ahoy up cli php nginx && ahoy cli php -v | grep -q Xdebug && echo "Enabled debug confguration. Use 'ahoy up' to disable."

  export-config:
    usage: Export theme config.
    cmd: |
      ahoy cli "./scripts/update-theme-config.sh"
      ahoy drush cde civictheme_dev

  export-content:
    usage: Export content (run with CIVICTHEME_CONTENT_PROFILE=corporate ahoy install-site) .
    cmd: |
      ahoy confirm "This will uninstall several modules and users. Proceed?" \
      && ahoy cli "CIVICTHEME_CONTENT_PROFILE=${CIVICTHEME_CONTENT_PROFILE:-default} ./scripts/update-default-content.sh" || echo "The operation was canceled."

  deploy:
    usage: Run remote deployment procedures.
    cmd: |
      ahoy confirm "Deployment usually runs in CI. Are you sure you want to proceed with manual deployment? (Run as DREVOPS_DEPLOY_PROCEED=1 ahoy deploy [type1,[type2..]], where [type] is 'code', 'docker', 'webhook')" \
      && ./scripts/drevops/deploy.sh "$@" || echo "The operation was canceled."

  github-labels:
    usage: Update project's GitHub labels.
    cmd: ./scripts/drevops/github-labels.sh "$@"

  doctor:
    usage: Find problems with current project setup.
    cmd: ./scripts/drevops/doctor.sh "$@"

  update:
    usage: Update development stack.
    cmd: ahoy confirm "Some committed files may become overwritten. Proceed?" && ./scripts/drevops/update.sh || echo "The operation was canceled."

  local:
    usage: Custom local commands. See `ahoy local help`.
    cmd: |
      if [ -f .ahoy.local.yml ]; then ahoy -f ".ahoy.local.yml" "$@"; else echo ".ahoy.local.yml does not exist. Copy default.ahoy.local.yml to .ahoy.local.yml and rerun this command."; fi

  # ----------------------------------------------------------------------------
  # Utilities.
  # ----------------------------------------------------------------------------
  confirm:
    cmd: |
      [ -z "$DREVOPS_AHOY_CONFIRM_RESPONSE" ] && read -r -p "$1 [y/N] " DREVOPS_AHOY_CONFIRM_RESPONSE; [ "$DREVOPS_AHOY_CONFIRM_RESPONSE" = "y" ] || [ "$DREVOPS_AHOY_CONFIRM_RESPONSE" = true ]
    hide: true

# Override entrypoint to alter default behaviour of Ahoy.
entrypoint:
  # Run all commands in Bash.
  - bash
  # Read the commands from the string.
  - -c
  # Exit the script if any statement returns a non-true return value.
  - -e
  # Read variables from .env file, respecting existing environment variable values.
  #
  # It is important to understand that variables set in .env file are already
  # available inside of the containers after stack is running (as a part of
  # docker-compose functionality), so most of the commands are using these
  # values taken from containers.
  #
  # However, since docker does not support changes to environment variables in
  # running containers without restarting containers, we are adding this
  # mechanism of reading variables here to allow adjustments of some variables
  # (like PHPCS scan targets) without the need to restart containers.
  #
  # As a rule of thumb, use `ahoy up cli` to apply changes to variables.
  - |
    t=$(mktemp) && export -p > "$t" && set -a && . ./.env && if [ -f ./.env.local ];then . ./.env.local;fi && set +a && . "$t" && rm "$t" && unset t
    bash -e -c "$0" "$@"
  # Replaced with your command.
  - '{{cmd}}'
  # The name of the command that was run (available as $0).
  - '{{name}}'
